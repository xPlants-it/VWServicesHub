package it.xtro.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.Property;

/**
 * Class _XTContainer was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _XTContainer extends BaseDataObject {

    private static final long serialVersionUID = 1L; 

    public static final String ID_XT_CONTAINER_PK_COLUMN = "id_xt_container";

    public static final Property<Boolean> FLAG_ACTIVE = Property.create("flagActive", Boolean.class);
    public static final Property<Integer> ID = Property.create("id", Integer.class);
    public static final Property<String> THE_EXTRAS = Property.create("theExtras", String.class);
    public static final Property<String> THE_NAME = Property.create("theName", String.class);

    protected boolean flagActive;
    protected int id;
    protected String theExtras;
    protected String theName;


    public void setFlagActive(boolean flagActive) {
        beforePropertyWrite("flagActive", this.flagActive, flagActive);
        this.flagActive = flagActive;
    }

	public boolean isFlagActive() {
        beforePropertyRead("flagActive");
        return this.flagActive;
    }

    public void setId(int id) {
        beforePropertyWrite("id", this.id, id);
        this.id = id;
    }

    public int getId() {
        beforePropertyRead("id");
        return this.id;
    }

    public void setTheExtras(String theExtras) {
        beforePropertyWrite("theExtras", this.theExtras, theExtras);
        this.theExtras = theExtras;
    }

    public String getTheExtras() {
        beforePropertyRead("theExtras");
        return this.theExtras;
    }

    public void setTheName(String theName) {
        beforePropertyWrite("theName", this.theName, theName);
        this.theName = theName;
    }

    public String getTheName() {
        beforePropertyRead("theName");
        return this.theName;
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "flagActive":
                return this.flagActive;
            case "id":
                return this.id;
            case "theExtras":
                return this.theExtras;
            case "theName":
                return this.theName;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "flagActive":
                this.flagActive = val == null ? false : (boolean)val;
                break;
            case "id":
                this.id = val == null ? 0 : (int)val;
                break;
            case "theExtras":
                this.theExtras = (String)val;
                break;
            case "theName":
                this.theName = (String)val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeBoolean(this.flagActive);
        out.writeInt(this.id);
        out.writeObject(this.theExtras);
        out.writeObject(this.theName);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.flagActive = in.readBoolean();
        this.id = in.readInt();
        this.theExtras = (String)in.readObject();
        this.theName = (String)in.readObject();
    }

}
